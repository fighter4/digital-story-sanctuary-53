// tsconfig.app.json
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true, // Recommended for importing JSON files
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true, // Enable all strict type-checking options
    // "noUnusedLocals": true, // Handled by ESLint
    // "noUnusedParameters": true, // Handled by ESLint
    // "noImplicitAny": true, // Part of "strict"
    "noFallthroughCasesInSwitch": true, // Keep this specific one if desired

    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"]
}
```javascript
// eslint.config.js
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";

export default tseslint.config(
  { ignores: ["dist", "node_modules", "public/pdf.worker.min.js"] }, // Added node_modules and worker
  {
    // Global ESLint recommended rules
    ...js.configs.recommended,
  },
  // TypeScript specific configurations
  ...tseslint.configs.recommendedTypeChecked, // Or recommended for less strictness initially
  {
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      parser: tseslint.parser,
      parserOptions: {
        project: true, // Enable this for type-aware linting
        tsconfigRootDir: import.meta.dirname, // Or your project root
      },
      globals: {
        ...globals.browser,
        ...globals.node, // Add node globals if needed for config files
      },
    },
    plugins: {
      "@typescript-eslint": tseslint.plugin,
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
    },
    rules: {
      // Base ESLint rules
      "no-unused-vars": "off", // Disable base rule, use TS version

      // TypeScript specific rules
      ...tseslint.configs.recommendedTypeChecked.rules, // Or .recommended.rules
      "@typescript-eslint/no-unused-vars": [
        "warn", // Enable this rule
        {
          argsIgnorePattern: "^_",
          varsIgnorePattern: "^_",
          caughtErrorsIgnorePattern: "^_",
        },
      ],
      "@typescript-eslint/no-explicit-any": "warn", // Good to enable for better type safety
      "@typescript-eslint/no-misused-promises": [
        "error",
        {
          "checksVoidReturn": false // Allow void-returning async functions for event handlers
        }
      ],
      // React specific rules
      ...reactHooks.configs.recommended.rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
      // Add other custom rules here if needed
    },
  }
);

